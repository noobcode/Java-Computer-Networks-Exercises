package simpleSocial;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.UUID;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import simpleSocial.User.Token;

public class SocialServer extends UnicastRemoteObject implements IServer{	

	private static final long serialVersionUID = 1L;
	private static Hashtable <String, User> registered = new Hashtable<String, User>();
	private static Hashtable <UUID, User> online = new Hashtable<UUID, User>();
	public static final String SERVICE_NAME = "Server";
	private static final int listeningPort = 52609;
	private static KeepAliveSender kas;
	
	protected SocialServer() throws RemoteException {
		super();
		LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
		LocateRegistry.getRegistry(Registry.REGISTRY_PORT).rebind(SERVICE_NAME, this);
		kas = new KeepAliveSender(registered);
		kas.setDaemon(true);
	}
	
	public static void main(String[] args) {
		ServerSocket serverSocket = null;
		Socket client = null;
		ThreadPoolExecutor pool = (ThreadPoolExecutor) Executors.newCachedThreadPool();	
		boolean[] clientPorts = new boolean[65535];
		setAllFalse(clientPorts);
			
		SocialServer server = null;
		try {
			server = new SocialServer();
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}
		
		try {
			serverSocket = new ServerSocket(listeningPort);
			kas.start();
			while(true){
				client = serverSocket.accept();
				updateOnlineList();
				pool.execute(new Task(client, registered, clientPorts, online));
			}
		} catch (IOException e) {
			System.out.println("error: errore di I/O. " + e.getMessage());
		} finally {
			pool.shutdown();
			if(serverSocket != null)
				try {
					serverSocket.close();
				} catch (IOException e) {
					System.out.println("error: errore di I/O. " + e.getMessage());
				}
		}
	}

	private static void setAllFalse(boolean[] ports){
		for(int i = 0; i < ports.length; i++)
			ports[i] = false;
	}
	
	private static void updateOnlineList(){
		if(registered.size() == 0 || online.size() == 0)
			return;
		Enumeration<UUID> uuid = online.keys();
		while(uuid.hasMoreElements()){
			UUID userID = uuid.nextElement();
			Token userToken = online.get(userID).getUID();
			if(!userToken.isValid() || !userID.equals(userToken.getKey())){
				synchronized(online){
					online.remove(userID);
				}
			}
		}
		
	}

	@Override
	public void registerForCallback(String user, IClient c) throws RemoteException {
		User u = registered.get(user);
		synchronized(u){
			u.setCallbackObj(c);
		}
	}

	@Override
	public void follow(String username, String toFollow) throws RemoteException {
		User userA = registered.get(username);
		User userB = registered.get(toFollow);
		// se A e B sono amici allora A pu√≤ seguire B
		if(userA.getFriends().contains(userB)){
			ArrayList<User> followers = userB.getFollowers();
			synchronized(followers){
				followers.add(userA);
			}
		}
	}
}
