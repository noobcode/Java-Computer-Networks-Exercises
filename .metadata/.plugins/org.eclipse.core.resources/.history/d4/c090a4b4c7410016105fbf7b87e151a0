package Server;

import java.io.*;
import java.net.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.concurrent.*;

public class SocialServer {	
	
	private static ServerSocket server;
	
	public static void main(String[] args) {
		ThreadPoolExecutor pool = (ThreadPoolExecutor) Executors.newCachedThreadPool();	
		Hashtable <String, User> registered = new Hashtable<String, User>();
		boolean[] clientPorts = new boolean[65535];
		setAllFalse(clientPorts);
		
		try {
			server = new ServerSocket(52609);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Socket client = null;
		while(true){
			try {
				client = server.accept();
				updateOnlineList(registered);
			} catch (IOException e) {
				e.printStackTrace();
			}
			pool.execute(new Task(client, registered, clientPorts));
		}
		
	}
	
	private static void setAllFalse(boolean[] c){
		for(int i = 0; i < c.length; i++)
			c[i] = false;
	}
	
	private static void updateOnlineList(Hashtable<String,User> registered){
		synchronized(registered){
			Enumeration<User> users = registered.elements();
			while(users.hasMoreElements()){
				User u = users.nextElement();
				if(!u.getUID().isValid(u.getUID().getKey()))
					u.setOnline(false);
			}
		}
	}
	
	
	
}
